// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1;

namespace WebApplication1.Migrations
{
    [DbContext(typeof(CarInspectionContext))]
    partial class CarInspectionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication1.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Car_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Color")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateDtp")
                        .HasColumnName("Date_DTP")
                        .HasColumnType("date");

                    b.Property<bool?>("Dtp")
                        .HasColumnName("DTP")
                        .HasColumnType("bit");

                    b.Property<string>("EngineType")
                        .IsRequired()
                        .HasColumnName("Engine Type")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("IdDriver")
                        .HasColumnName("id-driver")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PhotoDtp")
                        .HasColumnName("Photo_DTP")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("StateNumber")
                        .IsRequired()
                        .HasColumnName("State number")
                        .HasColumnType("nchar(9)")
                        .IsFixedLength(true)
                        .HasMaxLength(9);

                    b.Property<string>("TypeOfDrive")
                        .IsRequired()
                        .HasColumnName("type of drive")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasColumnName("VIN")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("CarId");

                    b.HasIndex("Color");

                    b.HasIndex("IdDriver");

                    b.ToTable("cars");
                });

            modelBuilder.Entity("WebApplication1.CarColor", b =>
                {
                    b.Property<int>("ColorNum")
                        .HasColumnName("Color num")
                        .HasColumnType("int");

                    b.Property<string>("ColorCode")
                        .HasColumnName("Color code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ColorName")
                        .HasColumnName("Color name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("ColorNum");

                    b.ToTable("car_color");
                });

            modelBuilder.Entity("WebApplication1.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Company")
                        .HasColumnName("company")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("Fine")
                        .HasColumnType("int");

                    b.Property<string>("Jobname")
                        .HasColumnName("jobname")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("PassportNumber")
                        .HasColumnName("passport number")
                        .HasColumnType("int");

                    b.Property<int?>("PassportSerial")
                        .IsRequired()
                        .HasColumnName("passport serial")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Photo")
                        .HasColumnName("photo")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Fine");

                    b.ToTable("drivers");
                });

            modelBuilder.Entity("WebApplication1.Fine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fine1")
                        .HasColumnName("Fine")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fines");
                });

            modelBuilder.Entity("WebApplication1.Licence", b =>
                {
                    b.Property<int>("LicenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("licence number")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Categories")
                        .IsRequired()
                        .HasColumnName("categories")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ExpireDate")
                        .IsRequired()
                        .HasColumnName("expire date")
                        .HasColumnType("date");

                    b.Property<int?>("IdDriver")
                        .HasColumnName("id-driver")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LicenceDate")
                        .IsRequired()
                        .HasColumnName("licence date")
                        .HasColumnType("date");

                    b.Property<string>("LicenceSeries")
                        .IsRequired()
                        .HasColumnName("licence series")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("LicenceNumber");

                    b.HasIndex("IdDriver");

                    b.ToTable("licences");
                });

            modelBuilder.Entity("WebApplication1.Car", b =>
                {
                    b.HasOne("WebApplication1.CarColor", "ColorNavigation")
                        .WithMany("Cars")
                        .HasForeignKey("Color")
                        .HasConstraintName("FK_cars_car_color")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Driver", "IdDriverNavigation")
                        .WithMany("Cars")
                        .HasForeignKey("IdDriver")
                        .HasConstraintName("FK_cars_drivers1")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Driver", b =>
                {
                    b.HasOne("WebApplication1.Fine", "FineNavigation")
                        .WithMany("Drivers")
                        .HasForeignKey("Fine")
                        .HasConstraintName("FK_drivers_Fines");
                });

            modelBuilder.Entity("WebApplication1.Licence", b =>
                {
                    b.HasOne("WebApplication1.Driver", "IdDriverNavigation")
                        .WithMany("Licences")
                        .HasForeignKey("IdDriver")
                        .HasConstraintName("FK_licences_drivers1");
                });
#pragma warning restore 612, 618
        }
    }
}
